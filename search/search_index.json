{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"StudioComponents is a collection of Roact implementations of common user interface elements found in Roblox Studio such as checkboxes, input fields, and scrollers. These closely match the look and functionality of their built-in counterparts and should be used to create user plugins. These components also leverage the theming API to dynamically recolor according to the user's theme setting in Studio. Warning This project is a work in progress - expect breaking changes! Why recreate the Studio interface? Closely replicating the built-in user interface gives user plugins a familiar feel. Studio users already recognise these interface items and understand both what they signify and how to use them. Designing a plugin to fit in seamlessly with the rest of Studio also offers a more coherent user experience with less visual distraction and friction when switching between third-party and built-in tools. Plugins created with StudioComponents The coherence benefit also applies between multiple user plugins. It is preferable for user plugins to share a general appearance rather than every plugin being visually different. Using StudioComponents will align the appearance of a plugin with existing plugins, including: Collision Groups Editor , an alternative to Studio's built-in Collision Groups Editor Layers , a tool for manipulating and visualizing logical sections of 3D models If your plugin belongs on this list, file an issue !","title":"Home"},{"location":"#why-recreate-the-studio-interface","text":"Closely replicating the built-in user interface gives user plugins a familiar feel. Studio users already recognise these interface items and understand both what they signify and how to use them. Designing a plugin to fit in seamlessly with the rest of Studio also offers a more coherent user experience with less visual distraction and friction when switching between third-party and built-in tools.","title":"Why recreate the Studio interface?"},{"location":"#plugins-created-with-studiocomponents","text":"The coherence benefit also applies between multiple user plugins. It is preferable for user plugins to share a general appearance rather than every plugin being visually different. Using StudioComponents will align the appearance of a plugin with existing plugins, including: Collision Groups Editor , an alternative to Studio's built-in Collision Groups Editor Layers , a tool for manipulating and visualizing logical sections of 3D models If your plugin belongs on this list, file an issue !","title":"Plugins created with StudioComponents"},{"location":"components/background/","text":"A solid-color borderless frame. It provides the same background color as built-in Studio widgets, for example Explorer and Properties. Dark Light This is commonly used for containing the main contents of a plugin, for example as a child of a widget with the rest of the plugin elements as its children. \ud83d\udda5\ufe0f Widget \u2514\u2500\u2500\u2500\ud83d\uddbc\ufe0f Background \u2514\u2500\u2500\u2500\ud83d\udd20 ... \u2514\u2500\u2500\u2500\ud83d\udd20 ... API & Usage This component renders a single frame. Any children passed to it will be rendered as children of the frame. Default props Property Value Size UDim2.fromScale(1, 1) Position UDim2.fromScale(0, 0) AnchorPoint Vector2.new(0, 0) LayoutOrder 0 ZIndex 1","title":"Background"},{"location":"components/background/#api-usage","text":"This component renders a single frame. Any children passed to it will be rendered as children of the frame.","title":"API &amp; Usage"},{"location":"components/background/#default-props","text":"Property Value Size UDim2.fromScale(1, 1) Position UDim2.fromScale(0, 0) AnchorPoint Vector2.new(0, 0) LayoutOrder 0 ZIndex 1","title":"Default props"},{"location":"components/button/","text":"Variant Dark Light Default Hovered Pressed Selected Disabled","title":"Button"},{"location":"components/checkbox/","text":"Variant Dark Light True False Indeterminate Hovered Disabled","title":"Checkbox"},{"location":"components/dropdown/","text":"","title":"Dropdown"},{"location":"components/label/","text":"","title":"Label"},{"location":"components/mainbutton/","text":"","title":"MainButton"},{"location":"components/scrollframe/","text":"","title":"ScrollFrame"},{"location":"components/slider/","text":"","title":"Slider"},{"location":"components/textinput/","text":"","title":"TextInput"},{"location":"components/verticalcollapsiblesection/","text":"","title":"VerticalCollapsibleSection"},{"location":"components/verticalexpandinglist/","text":"","title":"VerticalExpandingList"},{"location":"components/widget/","text":"","title":"Widget"},{"location":"guide/installation/","text":"Model file Either build the project from source using Rojo or download the latest release , then simply drag and drop the file into Studio or integrate it with a Rojo project. rojo build -o release.rbxm Git submodule Add this repository to your project as a submodule. git submodule add https://github.com/sircfenner/StudioComponents","title":"Installation"},{"location":"guide/installation/#model-file","text":"Either build the project from source using Rojo or download the latest release , then simply drag and drop the file into Studio or integrate it with a Rojo project. rojo build -o release.rbxm","title":"Model file"},{"location":"guide/installation/#git-submodule","text":"Add this repository to your project as a submodule. git submodule add https://github.com/sircfenner/StudioComponents","title":"Git submodule"},{"location":"guide/usage/","text":"StudioComponents must be a sibling of Roact in the Roblox instance hierarchy, for example: \ud83d\udcc2 Plugin \u2514\u2500\u2500\u2500\ud83d\udcc2 Vendor \u2514\u2500\u2500\u2500\ud83d\udcc3 StudioComponents \u2514\u2500\u2500\u2500\ud83d\udcc3 Roact ... Notes Default props Default props are listed only where they deviate from the Roblox defaults for instance properties BorderMode Generally inset: easier to reason about total size + any outer padding ColorStyle props Some -Color3 properties are available as -ColorStyle from Enum.StudioStyleGuideColor","title":"Usage"},{"location":"guide/usage/#notes","text":"","title":"Notes"},{"location":"guide/usage/#default-props","text":"Default props are listed only where they deviate from the Roblox defaults for instance properties","title":"Default props"},{"location":"guide/usage/#bordermode","text":"Generally inset: easier to reason about total size + any outer padding","title":"BorderMode"},{"location":"guide/usage/#colorstyle-props","text":"Some -Color3 properties are available as -ColorStyle from Enum.StudioStyleGuideColor","title":"ColorStyle props"}]}