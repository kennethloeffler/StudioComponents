{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"StudioComponents is a collection of Roact implementations of common user interface elements found in Roblox Studio such as checkboxes, input fields, and scrollers. These closely match the look and functionality of their built-in counterparts and should be used to create user plugins. These components also leverage the theming API to dynamically recolor according to the user's theme setting in Studio. Why recreate the Studio interface? Closely replicating the built-in user interface gives user plugins a familiar feel. Studio users already recognise these interface items and understand both what they signify and how to use them. Designing a plugin to fit in seamlessly with the rest of Studio also offers a more coherent user experience with less visual distraction and friction when switching between third-party and built-in tools. Plugins created with StudioComponents The coherence benefit also applies between multiple developer plugins. It is preferable for user plugins to share a general appearance rather than every plugin being visually different. Using StudioComponents will align the appearance of a plugin with existing plugins, including: Collision Groups Editor , an alternative to Studio's built-in Collision Groups Editor Layers , a tool for manipulating and visualizing logical sections of 3D models If your plugin belongs on this list, file an issue !","title":"Home"},{"location":"#why-recreate-the-studio-interface","text":"Closely replicating the built-in user interface gives user plugins a familiar feel. Studio users already recognise these interface items and understand both what they signify and how to use them. Designing a plugin to fit in seamlessly with the rest of Studio also offers a more coherent user experience with less visual distraction and friction when switching between third-party and built-in tools.","title":"Why recreate the Studio interface?"},{"location":"#plugins-created-with-studiocomponents","text":"The coherence benefit also applies between multiple developer plugins. It is preferable for user plugins to share a general appearance rather than every plugin being visually different. Using StudioComponents will align the appearance of a plugin with existing plugins, including: Collision Groups Editor , an alternative to Studio's built-in Collision Groups Editor Layers , a tool for manipulating and visualizing logical sections of 3D models If your plugin belongs on this list, file an issue !","title":"Plugins created with StudioComponents"},{"location":"components/background/","text":"Basic Short summary What it can be used for How it looks Configs, states, themes Where it can be found in Studio How to use it General / API Defaults Takes children? Takes extra instance props?","title":"Background"},{"location":"components/background/#basic","text":"Short summary What it can be used for","title":"Basic"},{"location":"components/background/#how-it-looks","text":"Configs, states, themes Where it can be found in Studio","title":"How it looks"},{"location":"components/background/#how-to-use-it","text":"General / API Defaults Takes children? Takes extra instance props?","title":"How to use it"},{"location":"components/button/","text":"","title":"Button"},{"location":"components/checkbox/","text":"","title":"Checkbox"},{"location":"components/label/","text":"","title":"Label"},{"location":"components/mainbutton/","text":"","title":"MainButton"},{"location":"components/scrollframe/","text":"","title":"ScrollFrame"},{"location":"components/slider/","text":"","title":"Slider"},{"location":"components/textinput/","text":"","title":"TextInput"},{"location":"components/verticalcollapsiblesection/","text":"","title":"VerticalCollapsibleSection"},{"location":"components/verticalexpandinglist/","text":"","title":"VerticalExpandingList"},{"location":"components/widget/","text":"","title":"Widget"},{"location":"guide/installation/","text":"Model file Either build the project from source using Rojo or download the latest release , then simply drag and drop the file into Studio or integrate it with a Rojo project. rojo build -o release.rbxm Git submodule Add this repository to your project as a submodule. git submodule add https://github.com/sircfenner/StudioComponents","title":"Installation"},{"location":"guide/installation/#model-file","text":"Either build the project from source using Rojo or download the latest release , then simply drag and drop the file into Studio or integrate it with a Rojo project. rojo build -o release.rbxm","title":"Model file"},{"location":"guide/installation/#git-submodule","text":"Add this repository to your project as a submodule. git submodule add https://github.com/sircfenner/StudioComponents","title":"Git submodule"},{"location":"guide/usage/","text":"StudioComponents must be a sibling of Roact in the Roblox instance hierarchy, for example: \ud83d\udcc2 Plugin \u2514\u2500\u2500\u2500\ud83d\udcc2 Vendor \u2514\u2500\u2500\u2500\ud83d\udcc3 StudioComponents \u2514\u2500\u2500\u2500\ud83d\udcc3 Roact ... Notes BorderMode Generally inset: easier to reason about total size + any outer padding ColorStyle props Some -Color3 properties are available as -ColorStyle from Enum.StudioStyleGuideColor","title":"Usage"},{"location":"guide/usage/#notes","text":"","title":"Notes"},{"location":"guide/usage/#bordermode","text":"Generally inset: easier to reason about total size + any outer padding","title":"BorderMode"},{"location":"guide/usage/#colorstyle-props","text":"Some -Color3 properties are available as -ColorStyle from Enum.StudioStyleGuideColor","title":"ColorStyle props"}]}